generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(50)
  email      String    @unique @db.VarChar(100)
  password   String    @db.Text
  name  String?   @db.VarChar(100)
  role       String    @db.VarChar(30)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  ratings    ratings[]

  comments   comments[]
  payments   payments[]
  user_books user_books[]

}

model books {
  book_id           Int       @id @default(autoincrement())
  isbn                String                @db.VarChar(13)
  name         String    @db.VarChar(200)
  author        String?   @db.VarChar(100)

  description   String?   @db.Text
  published_date Int 
  cover_image   String?   @db.VarChar(255)
  file_path     String?   @db.VarChar(500)
  price         Decimal   @default(0.00) @db.Decimal(10, 2)
  created_at    DateTime  @default(now())
  book_category_links book_category_links[]
  ratings       ratings[]
  comments      comments[]
  payments      payments[]
  user_books    user_books[]
}
model book_categories {
  category_id         Int                   @id @default(autoincrement())
  category_name       String                @db.VarChar(255)
  book_category_links book_category_links[]
}

model book_category_links {
  book_id         Int
  category_id     Int
  books           books           @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction, map: "book_category_links_ibfk_1")
  book_categories book_categories @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "book_category_links_ibfk_2")

  @@id([book_id, category_id])
  @@index([category_id], map: "category_id")
}


model ratings {
  rating_id  Int      @id @default(autoincrement())
  book_id    Int
  user_id    Int
  rating     Int      
  review     String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  books      books    @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_1")
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")

}

model comments {
  comments_id         Int      @id @default(autoincrement())
  book_id  Int
  user_id  Int
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  book     books    @relation(fields: [book_id], references: [book_id], onDelete: Cascade)
  user     users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model payments {
  pay_id         Int      @id @default(autoincrement())
  user_id  Int
  book_id  Int
  amount     Decimal  @db.Decimal(10, 2)
  status     String   @db.VarChar(20)
  paid_at    DateTime @default(now())
  user     users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  book     books    @relation(fields: [book_id], references: [book_id], onDelete: Cascade)
}

model user_books {
  id            Int      @id @default(autoincrement())
  user_id     Int
  book_id     Int
  purchased_at  DateTime @default(now())
  user          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  book          books    @relation(fields: [book_id], references: [book_id], onDelete: Cascade)

  @@unique([user_id, book_id])
}
